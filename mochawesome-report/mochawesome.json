{
  "stats": {
    "suites": 10,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "start": "2017-09-07T00:50:50.068Z",
    "end": "2017-09-07T00:51:42.325Z",
    "duration": 52257,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Contract: Contribution",
        "suites": [
          {
            "title": "#contstructor",
            "suites": [],
            "tests": [
              {
                "title": "#constructor accepts MiniMe instance",
                "fullTitle": "Contract: Contribution #contstructor #constructor accepts MiniMe instance",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
                "err": {},
                "isRoot": false,
                "uuid": "8b479564-a937-4545-8f0c-65f2703fd941",
                "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if cnd.controller is not contribution contract",
                "fullTitle": "Contract: Contribution #contstructor throws if cnd.controller is not contribution contract",
                "timedOut": false,
                "duration": 503,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "eaf55105-18c3-41b4-ac6a-03d9df647769",
                "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if it is not CND based contract",
                "fullTitle": "Contract: Contribution #contstructor throws if it is not CND based contract",
                "timedOut": false,
                "duration": 527,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "79b03dff-da4a-4686-8709-9d01d2887905",
                "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/contribution_test.js",
            "uuid": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
            "passes": [
              {
                "title": "#constructor accepts MiniMe instance",
                "fullTitle": "Contract: Contribution #contstructor #constructor accepts MiniMe instance",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
                "err": {},
                "isRoot": false,
                "uuid": "8b479564-a937-4545-8f0c-65f2703fd941",
                "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if cnd.controller is not contribution contract",
                "fullTitle": "Contract: Contribution #contstructor throws if cnd.controller is not contribution contract",
                "timedOut": false,
                "duration": 503,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "eaf55105-18c3-41b4-ac6a-03d9df647769",
                "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws if it is not CND based contract",
                "fullTitle": "Contract: Contribution #contstructor throws if it is not CND based contract",
                "timedOut": false,
                "duration": 527,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
                "err": {},
                "isRoot": false,
                "uuid": "79b03dff-da4a-4686-8709-9d01d2887905",
                "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1365,
            "rootEmpty": false
          },
          {
            "title": "#initializeTier",
            "suites": [
              {
                "title": "fallback",
                "suites": [],
                "tests": [
                  {
                    "title": "throws when called",
                    "fullTitle": "#initializeTier fallback throws when called",
                    "timedOut": false,
                    "duration": 1046,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9884ab1-8c3e-4b99-9dc4-a783b3c615b9",
                    "parentUUID": "56c52f72-890c-4db4-8ef4-70e8f1370e59",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "56c52f72-890c-4db4-8ef4-70e8f1370e59",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "throws when called",
                    "fullTitle": "#initializeTier fallback throws when called",
                    "timedOut": false,
                    "duration": 1046,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9884ab1-8c3e-4b99-9dc4-a783b3c615b9",
                    "parentUUID": "56c52f72-890c-4db4-8ef4-70e8f1370e59",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1046,
                "rootEmpty": false
              },
              {
                "title": "#proxyBuy",
                "suites": [],
                "tests": [
                  {
                    "title": "allows to buy 1 whiteslited investor",
                    "fullTitle": "#initializeTier #proxyBuy allows to buy 1 whiteslited investor",
                    "timedOut": false,
                    "duration": 1769,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "deeff8cd-86c9-4b7f-a6e9-8ff8c2838932",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "fullTitle": "#initializeTier #proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "timedOut": false,
                    "duration": 1050,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a152d126-29c9-4dab-a44d-f975eff47016",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "allows to buy with multisig contract",
                    "fullTitle": "#initializeTier #proxyBuy allows to buy with multisig contract",
                    "timedOut": false,
                    "duration": 601,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16a91b47-3d81-4f7e-8d8e-a8fe77a52b9f",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if maxCapInvestor is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if maxCapInvestor is reached",
                    "timedOut": false,
                    "duration": 513,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f99d512e-6b33-4040-858f-a13cc06808d5",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if tier cap is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if tier cap is reached",
                    "timedOut": false,
                    "duration": 597,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56d1341b-c448-4f94-a41c-b5c3345c3908",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if not whitelisted",
                    "fullTitle": "#initializeTier #proxyBuy throws if not whitelisted",
                    "timedOut": false,
                    "duration": 390,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a12726ca-a6d3-4e26-a6d8-89879ede930c",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if endTime is passed",
                    "fullTitle": "#initializeTier #proxyBuy throws if endTime is passed",
                    "timedOut": false,
                    "duration": 431,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "486383bd-fb17-45a1-a7a1-d73fd2820f7f",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "reach totalCap happy path",
                    "fullTitle": "#initializeTier #proxyBuy reach totalCap happy path",
                    "timedOut": false,
                    "duration": 452,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b1095790-bfff-4337-ba23-cdff6f78508c",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #proxyBuy \"before each\" hook",
                    "timedOut": false,
                    "duration": 141,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const isWhitelisted = await contribution.isWhitelisted(owner, 0);\n        assert.equal(isWhitelisted, true, 'whitelisting did not go thru');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1e3053c6-3cd4-4bb4-82c8-3804be3122f3",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "allows to buy 1 whiteslited investor",
                    "fullTitle": "#initializeTier #proxyBuy allows to buy 1 whiteslited investor",
                    "timedOut": false,
                    "duration": 1769,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "deeff8cd-86c9-4b7f-a6e9-8ff8c2838932",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "fullTitle": "#initializeTier #proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "timedOut": false,
                    "duration": 1050,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a152d126-29c9-4dab-a44d-f975eff47016",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "allows to buy with multisig contract",
                    "fullTitle": "#initializeTier #proxyBuy allows to buy with multisig contract",
                    "timedOut": false,
                    "duration": 601,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16a91b47-3d81-4f7e-8d8e-a8fe77a52b9f",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if maxCapInvestor is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if maxCapInvestor is reached",
                    "timedOut": false,
                    "duration": 513,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f99d512e-6b33-4040-858f-a13cc06808d5",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if tier cap is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if tier cap is reached",
                    "timedOut": false,
                    "duration": 597,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56d1341b-c448-4f94-a41c-b5c3345c3908",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if not whitelisted",
                    "fullTitle": "#initializeTier #proxyBuy throws if not whitelisted",
                    "timedOut": false,
                    "duration": 390,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a12726ca-a6d3-4e26-a6d8-89879ede930c",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if endTime is passed",
                    "fullTitle": "#initializeTier #proxyBuy throws if endTime is passed",
                    "timedOut": false,
                    "duration": 431,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "486383bd-fb17-45a1-a7a1-d73fd2820f7f",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "reach totalCap happy path",
                    "fullTitle": "#initializeTier #proxyBuy reach totalCap happy path",
                    "timedOut": false,
                    "duration": 452,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b1095790-bfff-4337-ba23-cdff6f78508c",
                    "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 8,
                "totalPasses": 8,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 5803,
                "rootEmpty": false
              },
              {
                "title": "#finalize",
                "suites": [],
                "tests": [
                  {
                    "title": "increases tierCount",
                    "fullTitle": "#initializeTier #finalize increases tierCount",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bc1a1bf-e00e-40b1-bd0d-8eb07722fc0d",
                    "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you call finalize on non-existed tier",
                    "fullTitle": "#initializeTier #finalize throws when you call finalize on non-existed tier",
                    "timedOut": false,
                    "duration": 416,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8997ccc7-a467-4d62-b8bc-53f5e4f6a901",
                    "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #finalize \"before each\" hook",
                    "timedOut": false,
                    "duration": 166,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const isWhitelisted = await contribution.isWhitelisted(owner, 0);\n        assert.equal(isWhitelisted, true, 'whitelisting did not go thru');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd3225ee-1e00-4fad-9c2b-c6f21b5e9b35",
                    "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "increases tierCount",
                    "fullTitle": "#initializeTier #finalize increases tierCount",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0bc1a1bf-e00e-40b1-bd0d-8eb07722fc0d",
                    "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you call finalize on non-existed tier",
                    "fullTitle": "#initializeTier #finalize throws when you call finalize on non-existed tier",
                    "timedOut": false,
                    "duration": 416,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8997ccc7-a467-4d62-b8bc-53f5e4f6a901",
                    "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 507,
                "rootEmpty": false
              },
              {
                "title": "#pauseContribution",
                "suites": [],
                "tests": [
                  {
                    "title": "sets paused",
                    "fullTitle": "#initializeTier #pauseContribution sets paused",
                    "timedOut": false,
                    "duration": 71,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccee5e29-0041-4908-be66-08957eeb3813",
                    "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you proxyBuy with paused state",
                    "fullTitle": "#initializeTier #pauseContribution throws when you proxyBuy with paused state",
                    "timedOut": false,
                    "duration": 468,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ce12b0b-91e0-4ab2-8499-aff4df92376d",
                    "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if non-owner calls it",
                    "fullTitle": "#initializeTier #pauseContribution throws if non-owner calls it",
                    "timedOut": false,
                    "duration": 387,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9609442f-83ba-471d-8c21-4e03ba3bd5e2",
                    "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #pauseContribution \"before each\" hook",
                    "timedOut": false,
                    "duration": 67,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad33efc5-c40b-4107-a069-d3713c159d08",
                    "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "sets paused",
                    "fullTitle": "#initializeTier #pauseContribution sets paused",
                    "timedOut": false,
                    "duration": 71,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccee5e29-0041-4908-be66-08957eeb3813",
                    "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you proxyBuy with paused state",
                    "fullTitle": "#initializeTier #pauseContribution throws when you proxyBuy with paused state",
                    "timedOut": false,
                    "duration": 468,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ce12b0b-91e0-4ab2-8499-aff4df92376d",
                    "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if non-owner calls it",
                    "fullTitle": "#initializeTier #pauseContribution throws if non-owner calls it",
                    "timedOut": false,
                    "duration": 387,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9609442f-83ba-471d-8c21-4e03ba3bd5e2",
                    "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 926,
                "rootEmpty": false
              },
              {
                "title": "#allocate",
                "suites": [],
                "tests": [
                  {
                    "title": "happy path",
                    "fullTitle": "#initializeTier #allocate happy path",
                    "timedOut": false,
                    "duration": 3323,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f655b5f0-9431-400b-8687-f5c083026f4e",
                    "parentUUID": "d59ac7f8-754e-4c17-8aa2-9e7bc66e314e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "d59ac7f8-754e-4c17-8aa2-9e7bc66e314e",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "happy path",
                    "fullTitle": "#initializeTier #allocate happy path",
                    "timedOut": false,
                    "duration": 3323,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f655b5f0-9431-400b-8687-f5c083026f4e",
                    "parentUUID": "d59ac7f8-754e-4c17-8aa2-9e7bc66e314e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 3323,
                "rootEmpty": false
              },
              {
                "title": "#allowTransfers",
                "suites": [],
                "tests": [
                  {
                    "title": "sets transferrable",
                    "fullTitle": "#initializeTier #allowTransfers sets transferrable",
                    "timedOut": false,
                    "duration": 263,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "475c1cc8-2e7b-40a0-ab52-565686fa5597",
                    "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "always allows to transfer after October 12",
                    "fullTitle": "#initializeTier #allowTransfers always allows to transfer after October 12",
                    "timedOut": false,
                    "duration": 666,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8796e48-36d3-4f16-890c-768e439b5a87",
                    "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "8db82256-79cc-4598-a138-7b20ce635930",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #allowTransfers \"before each\" hook",
                    "timedOut": false,
                    "duration": 238,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([miner], 0, true);\n        await contribution.buy({ from: miner, value: tier1_params.maxInvestorCap });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9d41ec07-560a-4b55-8383-a0998e0e422c",
                    "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "sets transferrable",
                    "fullTitle": "#initializeTier #allowTransfers sets transferrable",
                    "timedOut": false,
                    "duration": 263,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "475c1cc8-2e7b-40a0-ab52-565686fa5597",
                    "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "always allows to transfer after October 12",
                    "fullTitle": "#initializeTier #allowTransfers always allows to transfer after October 12",
                    "timedOut": false,
                    "duration": 666,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8796e48-36d3-4f16-890c-768e439b5a87",
                    "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 929,
                "rootEmpty": false
              },
              {
                "title": "#contributionOpen",
                "suites": [],
                "tests": [
                  {
                    "title": "happy path - returns true",
                    "fullTitle": "#initializeTier #contributionOpen happy path - returns true",
                    "timedOut": false,
                    "duration": 174,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a395868-1a63-44b8-ab6e-35a6ce050972",
                    "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when endTime passed",
                    "fullTitle": "#initializeTier #contributionOpen returns false when endTime passed",
                    "timedOut": false,
                    "duration": 122,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c505429-02d9-4efa-90bc-68d499f63f87",
                    "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when finalized was called",
                    "fullTitle": "#initializeTier #contributionOpen returns false when finalized was called",
                    "timedOut": false,
                    "duration": 335,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c992b92-d851-44f2-a9cc-2cb8f50b4483",
                    "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #contributionOpen \"before each\" hook",
                    "timedOut": false,
                    "duration": 96,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function (){\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20df02fd-386d-4984-bb5c-4c68ba03bbf1",
                    "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "happy path - returns true",
                    "fullTitle": "#initializeTier #contributionOpen happy path - returns true",
                    "timedOut": false,
                    "duration": 174,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8a395868-1a63-44b8-ab6e-35a6ce050972",
                    "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when endTime passed",
                    "fullTitle": "#initializeTier #contributionOpen returns false when endTime passed",
                    "timedOut": false,
                    "duration": 122,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c505429-02d9-4efa-90bc-68d499f63f87",
                    "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when finalized was called",
                    "fullTitle": "#initializeTier #contributionOpen returns false when finalized was called",
                    "timedOut": false,
                    "duration": 335,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c992b92-d851-44f2-a9cc-2cb8f50b4483",
                    "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 631,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "can intialize 4 tiers",
                "fullTitle": "Contract: Contribution #initializeTier can intialize 4 tiers",
                "timedOut": false,
                "duration": 2414,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
                "err": {},
                "isRoot": false,
                "uuid": "3d4cf7c2-ad97-42f4-b2bd-e8c33b01a0b1",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize tier without token initialization",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize tier without token initialization",
                "timedOut": false,
                "duration": 368,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "554b4b99-5baa-4644-8a26-597717faf793",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to overwrite tier",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to overwrite tier",
                "timedOut": false,
                "duration": 432,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
                "err": {},
                "isRoot": false,
                "uuid": "3e63a42f-7fe6-44b5-8327-5fa98b0c4e16",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize 5 tiers",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize 5 tiers",
                "timedOut": false,
                "duration": 2834,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
                "err": {},
                "isRoot": false,
                "uuid": "eb1ef5e4-e7f3-486a-b45a-23a2af8de659",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/contribution_test.js",
            "uuid": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Contribution #initializeTier \"before each\" hook",
                "timedOut": false,
                "duration": 1239,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      function unlockAccounts(password) {\n        for (var i = 0; i < web3.eth.accounts.length; i++) {\n          web3.personal.unlockAccount(`${web3.eth.accounts[i]}`, password, 100000);\n        }\n      }\n      const networkId = web3.version.network;\n      if (networkId !== '123' && networkId === '321') {\n        unlockAccounts('testtest');\n      }\n      const tokenFactory = await MiniMeTokenFactory.new();\n      cnd = await CND.new(tokenFactory.address);\n      contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      tier1_params = {\n        totalCap: new BigNumber(10 ** 18 * 2),\n        minimum: new BigNumber(10 ** 18 * 0.5),\n        maxInvestorCap: new BigNumber(10 ** 18 * 1.5),\n        exchangeRate: 3,\n        startTime: latestTime() + duration.minutes(5),\n        endTime: latestTime() + duration.weeks(1),\n        contributionAddress: contribution.address\n      }\n      tier1_deployed = await Tier.new(tier1_params.totalCap, tier1_params.minimum, tier1_params.maxInvestorCap, tier1_params.exchangeRate, tier1_params.startTime, tier1_params.endTime);\n      await tier1_deployed.changeController(contribution.address);",
                "err": {},
                "isRoot": false,
                "uuid": "5fcdce9e-7df3-4352-83f9-1940b9d6d364",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
            "passes": [
              {
                "title": "can intialize 4 tiers",
                "fullTitle": "Contract: Contribution #initializeTier can intialize 4 tiers",
                "timedOut": false,
                "duration": 2414,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
                "err": {},
                "isRoot": false,
                "uuid": "3d4cf7c2-ad97-42f4-b2bd-e8c33b01a0b1",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize tier without token initialization",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize tier without token initialization",
                "timedOut": false,
                "duration": 368,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "554b4b99-5baa-4644-8a26-597717faf793",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to overwrite tier",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to overwrite tier",
                "timedOut": false,
                "duration": 432,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
                "err": {},
                "isRoot": false,
                "uuid": "3e63a42f-7fe6-44b5-8327-5fa98b0c4e16",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize 5 tiers",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize 5 tiers",
                "timedOut": false,
                "duration": 2834,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
                "err": {},
                "isRoot": false,
                "uuid": "eb1ef5e4-e7f3-486a-b45a-23a2af8de659",
                "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6048,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 300000,
        "file": "/test/contribution_test.js",
        "uuid": "491bcf04-520a-4413-b4a6-0366ddb2260e",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Contribution \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 17,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a21be4b0-fe5e-47f0-8473-e381997342e0",
            "parentUUID": "491bcf04-520a-4413-b4a6-0366ddb2260e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Contribution \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "33380203-62a4-48d0-a353-b97c960eb988",
            "parentUUID": "491bcf04-520a-4413-b4a6-0366ddb2260e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Contribution \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "373e5271-2d57-4a19-8a7b-15a115a8d333",
            "parentUUID": "491bcf04-520a-4413-b4a6-0366ddb2260e",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "7a5f0387-208a-4731-9bad-07f8e219aff6",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "#constructor accepts MiniMe instance",
      "fullTitle": "#contstructor #constructor accepts MiniMe instance",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
      "err": {},
      "isRoot": false,
      "uuid": "8b479564-a937-4545-8f0c-65f2703fd941",
      "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if cnd.controller is not contribution contract",
      "fullTitle": "#contstructor throws if cnd.controller is not contribution contract",
      "timedOut": false,
      "duration": 503,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "eaf55105-18c3-41b4-ac6a-03d9df647769",
      "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if it is not CND based contract",
      "fullTitle": "#contstructor throws if it is not CND based contract",
      "timedOut": false,
      "duration": 527,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "79b03dff-da4a-4686-8709-9d01d2887905",
      "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can intialize 4 tiers",
      "fullTitle": "#initializeTier can intialize 4 tiers",
      "timedOut": false,
      "duration": 2414,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
      "err": {},
      "isRoot": false,
      "uuid": "3d4cf7c2-ad97-42f4-b2bd-e8c33b01a0b1",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize tier without token initialization",
      "fullTitle": "#initializeTier throws when you try to initialize tier without token initialization",
      "timedOut": false,
      "duration": 368,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
      "err": {},
      "isRoot": false,
      "uuid": "554b4b99-5baa-4644-8a26-597717faf793",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to overwrite tier",
      "fullTitle": "#initializeTier throws when you try to overwrite tier",
      "timedOut": false,
      "duration": 432,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
      "err": {},
      "isRoot": false,
      "uuid": "3e63a42f-7fe6-44b5-8327-5fa98b0c4e16",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize 5 tiers",
      "fullTitle": "#initializeTier throws when you try to initialize 5 tiers",
      "timedOut": false,
      "duration": 2834,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
      "err": {},
      "isRoot": false,
      "uuid": "eb1ef5e4-e7f3-486a-b45a-23a2af8de659",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when called",
      "fullTitle": "fallback throws when called",
      "timedOut": false,
      "duration": 1046,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
      "err": {},
      "isRoot": false,
      "uuid": "d9884ab1-8c3e-4b99-9dc4-a783b3c615b9",
      "parentUUID": "56c52f72-890c-4db4-8ef4-70e8f1370e59",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy 1 whiteslited investor",
      "fullTitle": "#proxyBuy allows to buy 1 whiteslited investor",
      "timedOut": false,
      "duration": 1769,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "deeff8cd-86c9-4b7f-a6e9-8ff8c2838932",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "fullTitle": "#proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "timedOut": false,
      "duration": 1050,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "a152d126-29c9-4dab-a44d-f975eff47016",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy with multisig contract",
      "fullTitle": "#proxyBuy allows to buy with multisig contract",
      "timedOut": false,
      "duration": 601,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "16a91b47-3d81-4f7e-8d8e-a8fe77a52b9f",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if maxCapInvestor is reached",
      "fullTitle": "#proxyBuy throws if maxCapInvestor is reached",
      "timedOut": false,
      "duration": 513,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "f99d512e-6b33-4040-858f-a13cc06808d5",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if tier cap is reached",
      "fullTitle": "#proxyBuy throws if tier cap is reached",
      "timedOut": false,
      "duration": 597,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "56d1341b-c448-4f94-a41c-b5c3345c3908",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not whitelisted",
      "fullTitle": "#proxyBuy throws if not whitelisted",
      "timedOut": false,
      "duration": 390,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "a12726ca-a6d3-4e26-a6d8-89879ede930c",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if endTime is passed",
      "fullTitle": "#proxyBuy throws if endTime is passed",
      "timedOut": false,
      "duration": 431,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "486383bd-fb17-45a1-a7a1-d73fd2820f7f",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reach totalCap happy path",
      "fullTitle": "#proxyBuy reach totalCap happy path",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "b1095790-bfff-4337-ba23-cdff6f78508c",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "increases tierCount",
      "fullTitle": "#finalize increases tierCount",
      "timedOut": false,
      "duration": 91,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "0bc1a1bf-e00e-40b1-bd0d-8eb07722fc0d",
      "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you call finalize on non-existed tier",
      "fullTitle": "#finalize throws when you call finalize on non-existed tier",
      "timedOut": false,
      "duration": 416,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "8997ccc7-a467-4d62-b8bc-53f5e4f6a901",
      "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets paused",
      "fullTitle": "#pauseContribution sets paused",
      "timedOut": false,
      "duration": 71,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
      "err": {},
      "isRoot": false,
      "uuid": "ccee5e29-0041-4908-be66-08957eeb3813",
      "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you proxyBuy with paused state",
      "fullTitle": "#pauseContribution throws when you proxyBuy with paused state",
      "timedOut": false,
      "duration": 468,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "3ce12b0b-91e0-4ab2-8499-aff4df92376d",
      "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if non-owner calls it",
      "fullTitle": "#pauseContribution throws if non-owner calls it",
      "timedOut": false,
      "duration": 387,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
      "err": {},
      "isRoot": false,
      "uuid": "9609442f-83ba-471d-8c21-4e03ba3bd5e2",
      "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#allocate happy path",
      "timedOut": false,
      "duration": 3323,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
      "err": {},
      "isRoot": false,
      "uuid": "f655b5f0-9431-400b-8687-f5c083026f4e",
      "parentUUID": "d59ac7f8-754e-4c17-8aa2-9e7bc66e314e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets transferrable",
      "fullTitle": "#allowTransfers sets transferrable",
      "timedOut": false,
      "duration": 263,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "475c1cc8-2e7b-40a0-ab52-565686fa5597",
      "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "always allows to transfer after October 12",
      "fullTitle": "#allowTransfers always allows to transfer after October 12",
      "timedOut": false,
      "duration": 666,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "a8796e48-36d3-4f16-890c-768e439b5a87",
      "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path - returns true",
      "fullTitle": "#contributionOpen happy path - returns true",
      "timedOut": false,
      "duration": 174,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
      "err": {},
      "isRoot": false,
      "uuid": "8a395868-1a63-44b8-ab6e-35a6ce050972",
      "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when endTime passed",
      "fullTitle": "#contributionOpen returns false when endTime passed",
      "timedOut": false,
      "duration": 122,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "9c505429-02d9-4efa-90bc-68d499f63f87",
      "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when finalized was called",
      "fullTitle": "#contributionOpen returns false when finalized was called",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "7c992b92-d851-44f2-a9cc-2cb8f50b4483",
      "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "#constructor accepts MiniMe instance",
      "fullTitle": "#contstructor #constructor accepts MiniMe instance",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await cnd.changeController(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      const miniMe = await contribution.cnd();\n      const contributionWalletAddress = await contribution.contributionWallet();\n      const foundersWalletAddress = await contribution.foundersWallet();\n      const bountyWalletAddress = await contribution.bountyWallet();\n      const advisorsWalletAddress = await contribution.advisorsWallet();\n      assert.equal(\n        miniMe,\n        cnd.address,\n        \"== token address\"\n      );\n      assert.equal(\n        contributionWalletAddress,\n        contributionWallet,\n        \"== contribution wallet address\"\n      );\n      assert.equal(\n        foundersWalletAddress,\n        foundersWallet,\n        \"== founders wallet address\"\n      );\n      assert.equal(\n        bountyWalletAddress,\n        bountyWallet,\n        \"== bounty wallet address\"\n      );\n      assert.equal(\n        advisorsWalletAddress,\n        advisorsWallet,\n        \"== advisors wallet address\"\n      );",
      "err": {},
      "isRoot": false,
      "uuid": "8b479564-a937-4545-8f0c-65f2703fd941",
      "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if cnd.controller is not contribution contract",
      "fullTitle": "#contstructor throws if cnd.controller is not contribution contract",
      "timedOut": false,
      "duration": 503,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const cnd = await CND.new(tokenFactory.address);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [cnd.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "eaf55105-18c3-41b4-ac6a-03d9df647769",
      "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if it is not CND based contract",
      "fullTitle": "#contstructor throws if it is not CND based contract",
      "timedOut": false,
      "duration": 527,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function (){\n      const tokenFactory = await MiniMeTokenFactory.new();\n      const genericMiniMe = await MiniMeToken.new(tokenFactory.address, '0x0', 0, \"MiniMe\", 18, \"MMT\", true);\n      const contribution = await Contribution.new(\n        contributionWallet,\n        foundersWallet,\n        advisorsWallet,\n        bountyWallet\n      );\n      await shouldThrow(contribution.initializeToken, [genericMiniMe.address]);",
      "err": {},
      "isRoot": false,
      "uuid": "79b03dff-da4a-4686-8709-9d01d2887905",
      "parentUUID": "9b849fda-21d2-48ad-83d8-60f15c72f28e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can intialize 4 tiers",
      "fullTitle": "#initializeTier can intialize 4 tiers",
      "timedOut": false,
      "duration": 2414,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      const tier1_from_contribution_array = await contribution.tiers(0);\n      assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n      const tier2_from_contribution_array = await contribution.tiers(1);\n      assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n      const tier3_from_contribution_array = await contribution.tiers(2);\n      assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n      const tier4_from_contribution_array = await contribution.tiers(3);\n      assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
      "err": {},
      "isRoot": false,
      "uuid": "3d4cf7c2-ad97-42f4-b2bd-e8c33b01a0b1",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize tier without token initialization",
      "fullTitle": "#initializeTier throws when you try to initialize tier without token initialization",
      "timedOut": false,
      "duration": 368,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await shouldThrow(contribution.initializeTier, [0, tier1_deployed.address]);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, '0x0000000000000000000000000000000000000000');",
      "err": {},
      "isRoot": false,
      "uuid": "554b4b99-5baa-4644-8a26-597717faf793",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to overwrite tier",
      "fullTitle": "#initializeTier throws when you try to overwrite tier",
      "timedOut": false,
      "duration": 432,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [0, '0x0039F22efB07A647557C7C5d17854CFD6D489eF3']);\n      const tier = await contribution.tiers(0);\n      assert.equal(tier, tier1_deployed.address);",
      "err": {},
      "isRoot": false,
      "uuid": "3e63a42f-7fe6-44b5-8327-5fa98b0c4e16",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize 5 tiers",
      "fullTitle": "#initializeTier throws when you try to initialize 5 tiers",
      "timedOut": false,
      "duration": 2834,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n      await deployThreeTiers(contribution.address);\n      await contribution.initializeToken(cnd.address);\n      await contribution.initializeTier(\n        0, tier1_deployed.address\n      );\n      await contribution.initializeTier(\n        1, tier2_deployed.address\n      );\n      await contribution.initializeTier(\n        2, tier3_deployed.address\n      );\n      await contribution.initializeTier(\n        3, tier4_deployed.address\n      );\n      await shouldThrow(contribution.initializeTier, [4, tier1_deployed.address]);\n      await shouldThrow(contribution.tiers, [4]);",
      "err": {},
      "isRoot": false,
      "uuid": "eb1ef5e4-e7f3-486a-b45a-23a2af8de659",
      "parentUUID": "0768a8d7-f0c6-4055-b21d-eca6f1564ad2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when called",
      "fullTitle": "fallback throws when called",
      "timedOut": false,
      "duration": 1046,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await shouldThrow(contribution.send, [tier1_params.minimum]);\n        await shouldThrow(tier1_deployed.send, [tier1_params.minimum]);\n        await shouldThrow(cnd.send, [tier1_params.minimum]);\n        const totalInvested = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvested, 0);",
      "err": {},
      "isRoot": false,
      "uuid": "d9884ab1-8c3e-4b99-9dc4-a783b3c615b9",
      "parentUUID": "56c52f72-890c-4db4-8ef4-70e8f1370e59",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy 1 whiteslited investor",
      "fullTitle": "#proxyBuy allows to buy 1 whiteslited investor",
      "timedOut": false,
      "duration": 1769,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const pre = await web3.eth.getBalance(owner);\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.buy({ from: owner, value: weiToSend });\n        const post = await web3.eth.getBalance(owner);\n        const postCon = await web3.eth.getBalance(contributionWallet);\n        assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "deeff8cd-86c9-4b7f-a6e9-8ff8c2838932",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "fullTitle": "#proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "timedOut": false,
      "duration": 1050,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const weiToSend = tier1_params.minimum.mul(2);\n        const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n        const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n        const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeft.toNumber(), 0);\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, false, 'capTier should not be full');\n        const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n        assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n        const totalSold = await contribution.totalTokensSold();\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n        const balance = await cnd.balanceOf(owner);\n        assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "a152d126-29c9-4dab-a44d-f975eff47016",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy with multisig contract",
      "fullTitle": "#proxyBuy allows to buy with multisig contract",
      "timedOut": false,
      "duration": 601,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const multiSig = await MultiSigWallet.new([miner, owner], 1);\n        await web3.eth.sendTransaction({ from: miner, to: multiSig.address, value: tier1_params.maxInvestorCap.mul(2) });\n        await contribution.whitelistAddresses([multiSig.address], 0, true);\n        const encodedProxyPaymentCall = contribution.contract.proxyPayment.getData(contribution.address);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        assert.equal(0, totalInvestedBefore.toNumber());\n        await multiSig.submitTransaction(contribution.address, tier1_params.maxInvestorCap, encodedProxyPaymentCall);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), tier1_params.maxInvestorCap.toNumber(), 'totalInvested is not equal to MaxCap');\n        const balanceOf = await cnd.balanceOf(multiSig.address);\n        assert.equal(balanceOf.toNumber(), tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "16a91b47-3d81-4f7e-8d8e-a8fe77a52b9f",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if maxCapInvestor is reached",
      "fullTitle": "#proxyBuy throws if maxCapInvestor is reached",
      "timedOut": false,
      "duration": 513,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: 1 }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "f99d512e-6b33-4040-858f-a13cc06808d5",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if tier cap is reached",
      "fullTitle": "#proxyBuy throws if tier cap is reached",
      "timedOut": false,
      "duration": 597,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "56d1341b-c448-4f94-a41c-b5c3345c3908",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not whitelisted",
      "fullTitle": "#proxyBuy throws if not whitelisted",
      "timedOut": false,
      "duration": 390,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "a12726ca-a6d3-4e26-a6d8-89879ede930c",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if endTime is passed",
      "fullTitle": "#proxyBuy throws if endTime is passed",
      "timedOut": false,
      "duration": 431,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "486383bd-fb17-45a1-a7a1-d73fd2820f7f",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reach totalCap happy path",
      "fullTitle": "#proxyBuy reach totalCap happy path",
      "timedOut": false,
      "duration": 452,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.whitelistAddresses([advisorsWallet], 0, true);\n        await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        let totalNow = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n        let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n        assert.equal(tokensLeftOwner.toNumber(), 0);\n        let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n        // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n        assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n        const isCapReached = await contribution.isCurrentTierCapReached();\n        assert.equal(isCapReached, true);\n        const totalSold = await contribution.totalTokensSold();\n        assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n        const investedWei = await tier1_deployed.totalInvestedWei();\n        assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "b1095790-bfff-4337-ba23-cdff6f78508c",
      "parentUUID": "15d95d3f-bd14-46b9-9db6-fc33ea486c1a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "increases tierCount",
      "fullTitle": "#finalize increases tierCount",
      "timedOut": false,
      "duration": 91,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 0);\n        await contribution.finalize();\n        tierCount = await contribution.tierCount();\n        assert.equal(tierCount.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "0bc1a1bf-e00e-40b1-bd0d-8eb07722fc0d",
      "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you call finalize on non-existed tier",
      "fullTitle": "#finalize throws when you call finalize on non-existed tier",
      "timedOut": false,
      "duration": 416,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.finalize();\n        const tierCountBefore = await contribution.tierCount();\n        await shouldThrow(contribution.finalize,[]);\n        const tierCountAfter = await contribution.tierCount();\n        assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "8997ccc7-a467-4d62-b8bc-53f5e4f6a901",
      "parentUUID": "de4b92fd-de39-4afd-a66d-6ff2a6c0af80",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets paused",
      "fullTitle": "#pauseContribution sets paused",
      "timedOut": false,
      "duration": 71,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let paused = await contribution.paused();\n        assert.equal(paused, false);\n        await contribution.pauseContribution(true);\n        paused = await contribution.paused();\n        assert.equal(paused, true);",
      "err": {},
      "isRoot": false,
      "uuid": "ccee5e29-0041-4908-be66-08957eeb3813",
      "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you proxyBuy with paused state",
      "fullTitle": "#pauseContribution throws when you proxyBuy with paused state",
      "timedOut": false,
      "duration": 468,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.pauseContribution(true);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n        await shouldThrow(contribution.proxyPayment, [owner, { from: owner, value: tier1_params.maxInvestorCap }]);\n        const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n        assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "3ce12b0b-91e0-4ab2-8499-aff4df92376d",
      "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if non-owner calls it",
      "fullTitle": "#pauseContribution throws if non-owner calls it",
      "timedOut": false,
      "duration": 387,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const before = await contribution.paused();\n        await shouldThrow(contribution.pauseContribution, [true, { from: advisorsWallet }]);\n        const after = await contribution.paused();\n        assert.equal(before, after);",
      "err": {},
      "isRoot": false,
      "uuid": "9609442f-83ba-471d-8c21-4e03ba3bd5e2",
      "parentUUID": "debbe264-9c44-4c01-bc6e-b1ca1a0e2ab5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#allocate happy path",
      "timedOut": false,
      "duration": 3323,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const should = require('chai')\n          .use(require('chai-as-promised'))\n          .use(require('chai-bignumber')(BigNumber))\n          .should()\n        await deployThreeTiers(contribution.address);\n        await contribution.initializeToken(cnd.address);\n        await contribution.initializeTier(\n          0, tier1_deployed.address\n        );\n        await contribution.initializeTier(\n          1, tier2_deployed.address\n        );\n        await contribution.initializeTier(\n          2, tier3_deployed.address\n        );\n        await contribution.initializeTier(\n          3, tier4_deployed.address\n        );\n        await contribution.setBlockTimestamp(tier4_params.startTime);\n        await contribution.whitelistAddresses([owner], 0, true);\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.finalize();\n        await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n        const totalTokenSold = await contribution.totalTokensSold();\n        const totalSupply = totalTokenSold.mul(100).div(75);\n        const foundersAmount = totalSupply.div(5);\n        const advisorsAmount = totalSupply.mul(38).div(1000);\n        const bountyAmount = totalSupply.mul(12).div(1000);\n        await contribution.finalize();\n        //will be succesful\n        await contribution.allocate();\n        // will be rejected\n        await shouldThrow(contribution.allocate,[]);\n        const balanceFounders = await cnd.balanceOf(foundersWallet);\n        const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n        const balanceBounty = await cnd.balanceOf(bountyWallet);\n        foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n        advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n        bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
      "err": {},
      "isRoot": false,
      "uuid": "f655b5f0-9431-400b-8687-f5c083026f4e",
      "parentUUID": "d59ac7f8-754e-4c17-8aa2-9e7bc66e314e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets transferrable",
      "fullTitle": "#allowTransfers sets transferrable",
      "timedOut": false,
      "duration": 263,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false);\n        await contribution.allowTransfers(true);\n        transferable = await contribution.transferable();\n        assert.equal(transferable, true);\n        let balanceMiner = await cnd.balanceOf(miner);\n        const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n        assert.equal(balanceMiner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n        await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: miner });\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n        balanceMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceMiner.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "475c1cc8-2e7b-40a0-ab52-565686fa5597",
      "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "always allows to transfer after October 12",
      "fullTitle": "#allowTransfers always allows to transfer after October 12",
      "timedOut": false,
      "duration": 666,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let transferable = await contribution.transferable();\n        assert.equal(transferable, false, 'transferable is true');\n        const balanceBeforeMiner = await cnd.balanceOf(miner);\n        await shouldThrow(cnd.transfer, [foundersWallet, tier1_params.maxInvestorCap, {from: miner}]);\n        let balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n        const numberOfTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate).toNumber();\n        assert.equal(balanceBeforeMiner.toNumber(), numberOfTokens);\n        const October12_2017_JS = new Date('October 12 2017 14:00:00').getTime()/1000;\n        await contribution.setBlockTimestamp(October12_2017_JS);\n        const contract_oct12 = await contribution.October12_2017();\n        assert(October12_2017_JS >= contract_oct12.toNumber());\n        await cnd.transfer(foundersWallet, numberOfTokens, {from: miner});\n        balanceAfterMiner = await cnd.balanceOf(miner);\n        assert.equal(balanceAfterMiner.toNumber(), 0);\n        const balanceFounder = await cnd.balanceOf(foundersWallet);\n        assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "a8796e48-36d3-4f16-890c-768e439b5a87",
      "parentUUID": "8db82256-79cc-4598-a138-7b20ce635930",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path - returns true",
      "fullTitle": "#contributionOpen happy path - returns true",
      "timedOut": false,
      "duration": 174,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, true);",
      "err": {},
      "isRoot": false,
      "uuid": "8a395868-1a63-44b8-ab6e-35a6ce050972",
      "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when endTime passed",
      "fullTitle": "#contributionOpen returns false when endTime passed",
      "timedOut": false,
      "duration": 122,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        let contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);\n        await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "9c505429-02d9-4efa-90bc-68d499f63f87",
      "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when finalized was called",
      "fullTitle": "#contributionOpen returns false when finalized was called",
      "timedOut": false,
      "duration": 335,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        await contribution.setBlockTimestamp(tier1_params.startTime);\n        await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n        await contribution.buy({ from: owner, value: tier1_params.maxInvestorCap });\n        await contribution.buy({ from: advisorsWallet, value: tier1_params.maxInvestorCap });\n        const finalizedTime = await tier1_deployed.finalizedTime();\n        assert(finalizedTime.toNumber() > 0);\n        contributionOpen = await contribution.contributionOpen();\n        assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "7c992b92-d851-44f2-a9cc-2cb8f50b4483",
      "parentUUID": "6b57e386-de97-4611-8fc0-dda08f6766ec",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}
{
  "stats": {
    "suites": 9,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2017-09-05T05:12:13.149Z",
    "end": "2017-09-05T05:38:29.640Z",
    "duration": 1576491,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Contract: Contribution",
        "suites": [
          {
            "title": "#initializeTier",
            "suites": [
              {
                "title": "fallback",
                "suites": [],
                "tests": [
                  {
                    "title": "throws when called",
                    "fullTitle": "#initializeTier fallback throws when called",
                    "timedOut": false,
                    "duration": 8237,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.send(tier1_params.minimum);\n                await tier1_deployed.send(tier1_params.minimum);\n                await cnd.send(tier1_params.minimum);\n                const totalInvested = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvested, 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59b9eab5-4c93-4747-8635-bf314313ce55",
                    "parentUUID": "65eddc67-abb8-4d64-a4a5-e1eb82ab5ed0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "65eddc67-abb8-4d64-a4a5-e1eb82ab5ed0",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "throws when called",
                    "fullTitle": "#initializeTier fallback throws when called",
                    "timedOut": false,
                    "duration": 8237,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.send(tier1_params.minimum);\n                await tier1_deployed.send(tier1_params.minimum);\n                await cnd.send(tier1_params.minimum);\n                const totalInvested = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvested, 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59b9eab5-4c93-4747-8635-bf314313ce55",
                    "parentUUID": "65eddc67-abb8-4d64-a4a5-e1eb82ab5ed0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 8237,
                "rootEmpty": false
              },
              {
                "title": "#proxyBuy",
                "suites": [],
                "tests": [
                  {
                    "title": "allows to buy 1 whiteslited investor",
                    "fullTitle": "#initializeTier #proxyBuy allows to buy 1 whiteslited investor",
                    "timedOut": false,
                    "duration": 3667,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const pre = await web3.eth.getBalance(owner);\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                const post = await web3.eth.getBalance(owner);\n                const postCon = await web3.eth.getBalance(contributionWallet);\n                assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f75c3ace-985e-403e-b5b4-b2b14a031325",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "fullTitle": "#initializeTier #proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "timedOut": false,
                    "duration": 5058,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n                const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), 0);\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, false, 'capTier should not be full');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4863b6a1-26d3-4cdf-a2b2-fa0f51469453",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if maxCapInvestor is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if maxCapInvestor is reached",
                    "timedOut": false,
                    "duration": 3104,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: 1 });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b541cba-489a-4527-b27c-c804a39ccc8f",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if tier cap is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if tier cap is reached",
                    "timedOut": false,
                    "duration": 9300,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dba5a247-b44c-4795-bf98-1065dc0f2899",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if not whitelisted",
                    "fullTitle": "#initializeTier #proxyBuy throws if not whitelisted",
                    "timedOut": false,
                    "duration": 3045,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7eb180b1-5250-44a4-b7ba-16f71b1af440",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if endTime is passed",
                    "fullTitle": "#initializeTier #proxyBuy throws if endTime is passed",
                    "timedOut": false,
                    "duration": 6181,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52377389-aec2-42ef-a6f2-a2111f273647",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "reach totalCap happy path",
                    "fullTitle": "#initializeTier #proxyBuy reach totalCap happy path",
                    "timedOut": false,
                    "duration": 5180,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n                let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeftOwner.toNumber(), 0);\n                let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n                // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n                assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, true);\n                const totalSold = await contribution.totalTokensSold();\n                assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n                const investedWei = await tier1_deployed.totalInvestedWei();\n                assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "adb6b484-be78-41aa-8b30-726abfcc9b05",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "#initializeTier #proxyBuy \"before each\" hook",
                    "timedOut": false,
                    "duration": 8254,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                const isWhitelisted = await contribution.isWhitelisted(owner, 0);\n                assert.equal(isWhitelisted, true, 'whitelisting did not go thru');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7615ceb-0534-4de5-a180-479f44c19527",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "allows to buy 1 whiteslited investor",
                    "fullTitle": "#initializeTier #proxyBuy allows to buy 1 whiteslited investor",
                    "timedOut": false,
                    "duration": 3667,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const pre = await web3.eth.getBalance(owner);\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                const post = await web3.eth.getBalance(owner);\n                const postCon = await web3.eth.getBalance(contributionWallet);\n                assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f75c3ace-985e-403e-b5b4-b2b14a031325",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "fullTitle": "#initializeTier #proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
                    "timedOut": false,
                    "duration": 5058,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n                const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), 0);\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, false, 'capTier should not be full');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4863b6a1-26d3-4cdf-a2b2-fa0f51469453",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if maxCapInvestor is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if maxCapInvestor is reached",
                    "timedOut": false,
                    "duration": 3104,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: 1 });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b541cba-489a-4527-b27c-c804a39ccc8f",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if tier cap is reached",
                    "fullTitle": "#initializeTier #proxyBuy throws if tier cap is reached",
                    "timedOut": false,
                    "duration": 9300,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dba5a247-b44c-4795-bf98-1065dc0f2899",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if not whitelisted",
                    "fullTitle": "#initializeTier #proxyBuy throws if not whitelisted",
                    "timedOut": false,
                    "duration": 3045,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7eb180b1-5250-44a4-b7ba-16f71b1af440",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if endTime is passed",
                    "fullTitle": "#initializeTier #proxyBuy throws if endTime is passed",
                    "timedOut": false,
                    "duration": 6181,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "52377389-aec2-42ef-a6f2-a2111f273647",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "reach totalCap happy path",
                    "fullTitle": "#initializeTier #proxyBuy reach totalCap happy path",
                    "timedOut": false,
                    "duration": 5180,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n                let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeftOwner.toNumber(), 0);\n                let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n                // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n                assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, true);\n                const totalSold = await contribution.totalTokensSold();\n                assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n                const investedWei = await tier1_deployed.totalInvestedWei();\n                assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "adb6b484-be78-41aa-8b30-726abfcc9b05",
                    "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": true,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 35535,
                "rootEmpty": false
              },
              {
                "title": "#finalize",
                "suites": [],
                "tests": [
                  {
                    "title": "increases tierCount",
                    "fullTitle": "#initializeTier #finalize increases tierCount",
                    "timedOut": false,
                    "duration": 6139,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 0);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.finalize();\n                tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f16c2111-3ba9-44ad-8250-b80ee05514c6",
                    "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you call finalize on non-existed tier",
                    "fullTitle": "#initializeTier #finalize throws when you call finalize on non-existed tier",
                    "timedOut": false,
                    "duration": 3028,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const tierCountBefore = await contribution.tierCount();\n                await contribution.finalize();\n                const tierCountAfter = await contribution.tierCount();\n                assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c56a89ff-90b1-4410-b06b-299dafa8bce8",
                    "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "a06479b1-7504-409e-b034-9888333efed3",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "increases tierCount",
                    "fullTitle": "#initializeTier #finalize increases tierCount",
                    "timedOut": false,
                    "duration": 6139,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 0);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.finalize();\n                tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 1);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f16c2111-3ba9-44ad-8250-b80ee05514c6",
                    "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you call finalize on non-existed tier",
                    "fullTitle": "#initializeTier #finalize throws when you call finalize on non-existed tier",
                    "timedOut": false,
                    "duration": 3028,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const tierCountBefore = await contribution.tierCount();\n                await contribution.finalize();\n                const tierCountAfter = await contribution.tierCount();\n                assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c56a89ff-90b1-4410-b06b-299dafa8bce8",
                    "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 9167,
                "rootEmpty": false
              },
              {
                "title": "#pauseContribution",
                "suites": [],
                "tests": [
                  {
                    "title": "sets paused",
                    "fullTitle": "#initializeTier #pauseContribution sets paused",
                    "timedOut": false,
                    "duration": 4081,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let paused = await contribution.paused();\n                assert.equal(paused, false);\n                await contribution.pauseContribution(true);\n                paused = await contribution.paused();\n                assert.equal(paused, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "418bbeb6-e895-4690-8b26-3542fe7df39f",
                    "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you proxyBuy with paused state",
                    "fullTitle": "#initializeTier #pauseContribution throws when you proxyBuy with paused state",
                    "timedOut": false,
                    "duration": 15491,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.pauseContribution(true);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04579007-6112-4a89-a6e8-eeecb96d5d13",
                    "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if non-owner calls it",
                    "fullTitle": "#initializeTier #pauseContribution throws if non-owner calls it",
                    "timedOut": false,
                    "duration": 4195,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                const before = await contribution.paused();\n                await contribution.pauseContribution(true, { from: advisorsWallet });\n                const after = await contribution.paused();\n                assert.equal(before, after);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8da54fd-8372-4db8-ad2d-4ce0793596a7",
                    "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "sets paused",
                    "fullTitle": "#initializeTier #pauseContribution sets paused",
                    "timedOut": false,
                    "duration": 4081,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let paused = await contribution.paused();\n                assert.equal(paused, false);\n                await contribution.pauseContribution(true);\n                paused = await contribution.paused();\n                assert.equal(paused, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "418bbeb6-e895-4690-8b26-3542fe7df39f",
                    "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws when you proxyBuy with paused state",
                    "fullTitle": "#initializeTier #pauseContribution throws when you proxyBuy with paused state",
                    "timedOut": false,
                    "duration": 15491,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.pauseContribution(true);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04579007-6112-4a89-a6e8-eeecb96d5d13",
                    "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "throws if non-owner calls it",
                    "fullTitle": "#initializeTier #pauseContribution throws if non-owner calls it",
                    "timedOut": false,
                    "duration": 4195,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                const before = await contribution.paused();\n                await contribution.pauseContribution(true, { from: advisorsWallet });\n                const after = await contribution.paused();\n                assert.equal(before, after);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8da54fd-8372-4db8-ad2d-4ce0793596a7",
                    "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 23767,
                "rootEmpty": false
              },
              {
                "title": "#allocate",
                "suites": [],
                "tests": [
                  {
                    "title": "happy path",
                    "fullTitle": "#initializeTier #allocate happy path",
                    "timedOut": false,
                    "duration": 46989,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const should = require('chai')\n                    .use(require('chai-as-promised'))\n                    .use(require('chai-bignumber')(BigNumber))\n                    .should()\n                await deployThreeTiers();\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.initializeTier(\n                    1, tier2_deployed.address\n                );\n                await contribution.initializeTier(\n                    2, tier3_deployed.address\n                );\n                await contribution.initializeTier(\n                    3, tier4_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier4_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n                const totalTokenSold = await contribution.totalTokensSold();\n                const totalSupply = totalTokenSold.mul(100).div(75);\n                const foundersAmount = totalSupply.div(5);\n                const advisorsAmount = totalSupply.mul(38).div(1000);\n                const bountyAmount = totalSupply.mul(12).div(1000);\n                await contribution.finalize();\n                //will be succesful\n                await contribution.allocate();\n                // will be rejected\n                await contribution.allocate();\n                const balanceFounders = await cnd.balanceOf(foundersWallet);\n                const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n                const balanceBounty = await cnd.balanceOf(bountyWallet);\n                foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n                advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n                bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6786de15-d51e-4088-ac96-d133d816d451",
                    "parentUUID": "32614910-8138-46d5-b48a-ba096b01d356",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "32614910-8138-46d5-b48a-ba096b01d356",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "happy path",
                    "fullTitle": "#initializeTier #allocate happy path",
                    "timedOut": false,
                    "duration": 46989,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                const should = require('chai')\n                    .use(require('chai-as-promised'))\n                    .use(require('chai-bignumber')(BigNumber))\n                    .should()\n                await deployThreeTiers();\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.initializeTier(\n                    1, tier2_deployed.address\n                );\n                await contribution.initializeTier(\n                    2, tier3_deployed.address\n                );\n                await contribution.initializeTier(\n                    3, tier4_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier4_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n                const totalTokenSold = await contribution.totalTokensSold();\n                const totalSupply = totalTokenSold.mul(100).div(75);\n                const foundersAmount = totalSupply.div(5);\n                const advisorsAmount = totalSupply.mul(38).div(1000);\n                const bountyAmount = totalSupply.mul(12).div(1000);\n                await contribution.finalize();\n                //will be succesful\n                await contribution.allocate();\n                // will be rejected\n                await contribution.allocate();\n                const balanceFounders = await cnd.balanceOf(foundersWallet);\n                const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n                const balanceBounty = await cnd.balanceOf(bountyWallet);\n                foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n                advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n                bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6786de15-d51e-4088-ac96-d133d816d451",
                    "parentUUID": "32614910-8138-46d5-b48a-ba096b01d356",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 46989,
                "rootEmpty": false
              },
              {
                "title": "#allowTransfers",
                "suites": [],
                "tests": [
                  {
                    "title": "sets transferrable",
                    "fullTitle": "#initializeTier #allowTransfers sets transferrable",
                    "timedOut": false,
                    "duration": 11334,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                let transferable = await contribution.transferable();\n                assert.equal(transferable, false);\n                await contribution.allowTransfers(true);\n                transferable = await contribution.transferable();\n                assert.equal(transferable, true);\n                let balanceOwner = await cnd.balanceOf(owner);\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(balanceOwner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n                await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: owner });\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n                balanceOwner = await cnd.balanceOf(owner);\n                assert.equal(balanceOwner.toNumber(), 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b46113e5-aad6-4fc4-af35-e01f22e44e83",
                    "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "always allows to transfer after October 12",
                    "fullTitle": "#initializeTier #allowTransfers always allows to transfer after October 12",
                    "timedOut": false,
                    "duration": 16362,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const balanceBeforeMiner = await cnd.balanceOf(miner);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                let balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n                const October12_2017 = 1507830400;\n                await contribution.setBlockTimestamp(October12_2017 + 1);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner, 0);\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89f71ea2-db51-4a4d-9ba1-d689b7d44d96",
                    "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "sets transferrable",
                    "fullTitle": "#initializeTier #allowTransfers sets transferrable",
                    "timedOut": false,
                    "duration": 11334,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                let transferable = await contribution.transferable();\n                assert.equal(transferable, false);\n                await contribution.allowTransfers(true);\n                transferable = await contribution.transferable();\n                assert.equal(transferable, true);\n                let balanceOwner = await cnd.balanceOf(owner);\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(balanceOwner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n                await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: owner });\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n                balanceOwner = await cnd.balanceOf(owner);\n                assert.equal(balanceOwner.toNumber(), 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b46113e5-aad6-4fc4-af35-e01f22e44e83",
                    "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "always allows to transfer after October 12",
                    "fullTitle": "#initializeTier #allowTransfers always allows to transfer after October 12",
                    "timedOut": false,
                    "duration": 16362,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const balanceBeforeMiner = await cnd.balanceOf(miner);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                let balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n                const October12_2017 = 1507830400;\n                await contribution.setBlockTimestamp(October12_2017 + 1);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner, 0);\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
                    "err": {},
                    "isRoot": false,
                    "uuid": "89f71ea2-db51-4a4d-9ba1-d689b7d44d96",
                    "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 27696,
                "rootEmpty": false
              },
              {
                "title": "#contributionOpen",
                "suites": [],
                "tests": [
                  {
                    "title": "happy path - returns true",
                    "fullTitle": "#initializeTier #contributionOpen happy path - returns true",
                    "timedOut": false,
                    "duration": 5202,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c8dcfc1-3cc1-401e-8bec-b3ff44c3744e",
                    "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when endTime passed",
                    "fullTitle": "#initializeTier #contributionOpen returns false when endTime passed",
                    "timedOut": false,
                    "duration": 6193,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e275866-7110-4aec-8068-abdc43c94081",
                    "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when finalized was called",
                    "fullTitle": "#initializeTier #contributionOpen returns false when finalized was called",
                    "timedOut": false,
                    "duration": 12422,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                const finalizedTime = await tier1_deployed.finalizedTime();\n                assert(finalizedTime.toNumber() > 0);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2078af31-7f0d-451f-8095-f95339c02274",
                    "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 300000,
                "file": "/test/contribution_test.js",
                "uuid": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
                "beforeHooks": [],
                "afterHooks": [],
                "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
                "passes": [
                  {
                    "title": "happy path - returns true",
                    "fullTitle": "#initializeTier #contributionOpen happy path - returns true",
                    "timedOut": false,
                    "duration": 5202,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, true);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c8dcfc1-3cc1-401e-8bec-b3ff44c3744e",
                    "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when endTime passed",
                    "fullTitle": "#initializeTier #contributionOpen returns false when endTime passed",
                    "timedOut": false,
                    "duration": 6193,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e275866-7110-4aec-8068-abdc43c94081",
                    "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "returns false when finalized was called",
                    "fullTitle": "#initializeTier #contributionOpen returns false when finalized was called",
                    "timedOut": false,
                    "duration": 12422,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                const finalizedTime = await tier1_deployed.finalizedTime();\n                assert(finalizedTime.toNumber() > 0);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2078af31-7f0d-451f-8095-f95339c02274",
                    "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasBeforeHooks": false,
                "hasAfterHooks": false,
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 23817,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "can intialize 4 tiers",
                "fullTitle": "Contract: Contribution #initializeTier can intialize 4 tiers",
                "timedOut": false,
                "duration": 20293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            const tier1_from_contribution_array = await contribution.tiers(0);\n            assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n            const tier2_from_contribution_array = await contribution.tiers(1);\n            assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n            const tier3_from_contribution_array = await contribution.tiers(2);\n            assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n            const tier4_from_contribution_array = await contribution.tiers(3);\n            assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
                "err": {},
                "isRoot": false,
                "uuid": "25f45cd7-9eb6-4bef-bdb8-fa7cc5812800",
                "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to overwrite tier",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to overwrite tier",
                "timedOut": false,
                "duration": 7182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            const txReceipt = await contribution.initializeTier(0, \"0x999\");\n            const tier = await contribution.tiers(0);\n            assert.equal(tier, tier1_deployed.address);",
                "err": {},
                "isRoot": false,
                "uuid": "0b958097-451e-4916-ada1-3b5a5e186829",
                "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize 5 tiers",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize 5 tiers",
                "timedOut": false,
                "duration": 23386,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            await contribution.initializeTier(4, tier1_deployed.address);\n            const tier = await contribution.tiers(4);\n            assert.equal(tier, \"0x\");",
                "err": {},
                "isRoot": false,
                "uuid": "42b3cad2-1e09-4372-a0c9-f39543d4d993",
                "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/contribution_test.js",
            "uuid": "45cebc74-5d77-4948-a271-27a528cd6c4a",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Contribution #initializeTier \"before each\" hook",
                "timedOut": false,
                "duration": 55498,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            function unlockAccounts(password) {\n                for (var i = 0; i < web3.eth.accounts.length; i++) {\n                    web3.personal.unlockAccount(`${web3.eth.accounts[i]}`, password, 100000);\n                }\n            }\n            unlockAccounts('testtest');\n            const tokenFactory = await MiniMeTokenFactory.new();\n            cnd = await CND.new(tokenFactory.address);\n            contribution = await Contribution.new(\n                cnd.address,\n                contributionWallet,\n                foundersWallet,\n                advisorsWallet,\n                bountyWallet\n            );\n            await cnd.changeController(contribution.address);\n            tier1_params = {\n                totalCap: new BigNumber(10 ** 18 * 2),\n                minimum: new BigNumber(10 ** 18 * 0.5),\n                maxInvestorCap: new BigNumber(10 ** 18 * 1.5),\n                exchangeRate: 3,\n                startTime: latestTime() + duration.minutes(5),\n                endTime: latestTime() + duration.weeks(1),\n                contributionAddress: contribution.address\n            }\n            tier1_deployed = await Tier.new(tier1_params.totalCap, tier1_params.minimum, tier1_params.maxInvestorCap, tier1_params.exchangeRate, tier1_params.startTime, tier1_params.endTime);\n            await tier1_deployed.changeController(contribution.address);",
                "err": {},
                "isRoot": false,
                "uuid": "b590904a-9e23-49a8-891e-66fdfd095264",
                "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
            "passes": [
              {
                "title": "can intialize 4 tiers",
                "fullTitle": "Contract: Contribution #initializeTier can intialize 4 tiers",
                "timedOut": false,
                "duration": 20293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            const tier1_from_contribution_array = await contribution.tiers(0);\n            assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n            const tier2_from_contribution_array = await contribution.tiers(1);\n            assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n            const tier3_from_contribution_array = await contribution.tiers(2);\n            assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n            const tier4_from_contribution_array = await contribution.tiers(3);\n            assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
                "err": {},
                "isRoot": false,
                "uuid": "25f45cd7-9eb6-4bef-bdb8-fa7cc5812800",
                "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to overwrite tier",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to overwrite tier",
                "timedOut": false,
                "duration": 7182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            const txReceipt = await contribution.initializeTier(0, \"0x999\");\n            const tier = await contribution.tiers(0);\n            assert.equal(tier, tier1_deployed.address);",
                "err": {},
                "isRoot": false,
                "uuid": "0b958097-451e-4916-ada1-3b5a5e186829",
                "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when you try to initialize 5 tiers",
                "fullTitle": "Contract: Contribution #initializeTier throws when you try to initialize 5 tiers",
                "timedOut": false,
                "duration": 23386,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            await contribution.initializeTier(4, tier1_deployed.address);\n            const tier = await contribution.tiers(4);\n            assert.equal(tier, \"0x\");",
                "err": {},
                "isRoot": false,
                "uuid": "42b3cad2-1e09-4372-a0c9-f39543d4d993",
                "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 50861,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "#constructor accepts MiniMe instance",
            "fullTitle": "Contract: Contribution #constructor accepts MiniMe instance",
            "timedOut": false,
            "duration": 5734,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "async function () {\n        const tokenFactory = await MiniMeTokenFactory.new();\n        const cnd = await CND.new(tokenFactory.address);\n        const contribution = await Contribution.new(\n            cnd.address,\n            contributionWallet,\n            foundersWallet,\n            advisorsWallet,\n            bountyWallet\n        );\n        // await contribution.changeController(owner);\n        const miniMe = await contribution.cnd();\n        const contributionWalletAddress = await contribution.contributionWallet();\n        const foundersWalletAddress = await contribution.foundersWallet();\n        const bountyWalletAddress = await contribution.bountyWallet();\n        const advisorsWalletAddress = await contribution.advisorsWallet();\n        assert.equal(\n            miniMe,\n            cnd.address,\n            \"== token address\"\n        );\n        assert.equal(\n            contributionWalletAddress,\n            contributionWallet,\n            \"== contribution wallet address\"\n        );\n        assert.equal(\n            foundersWalletAddress,\n            foundersWallet,\n            \"== founders wallet address\"\n        );\n        assert.equal(\n            bountyWalletAddress,\n            bountyWallet,\n            \"== bounty wallet address\"\n        );\n        assert.equal(\n            advisorsWalletAddress,\n            advisorsWallet,\n            \"== advisors wallet address\"\n        );",
            "err": {},
            "isRoot": false,
            "uuid": "6ccebc62-6920-4726-91ef-08dbc0268edb",
            "parentUUID": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 300000,
        "file": "/test/contribution_test.js",
        "uuid": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Contribution \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 40,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "98a30801-8147-4c84-bd4c-01f5615bd082",
            "parentUUID": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Contribution \"before each\" hook: before test",
            "timedOut": false,
            "duration": 19,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5b779eeb-1d57-40c1-b4e5-ebc599e1ac29",
            "parentUUID": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Contribution \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ae57132f-0b26-4a8e-90c9-a0fbce458e90",
            "parentUUID": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/rstorm/repos/audity/cindicator/test/contribution_test.js",
        "passes": [
          {
            "title": "#constructor accepts MiniMe instance",
            "fullTitle": "Contract: Contribution #constructor accepts MiniMe instance",
            "timedOut": false,
            "duration": 5734,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "async function () {\n        const tokenFactory = await MiniMeTokenFactory.new();\n        const cnd = await CND.new(tokenFactory.address);\n        const contribution = await Contribution.new(\n            cnd.address,\n            contributionWallet,\n            foundersWallet,\n            advisorsWallet,\n            bountyWallet\n        );\n        // await contribution.changeController(owner);\n        const miniMe = await contribution.cnd();\n        const contributionWalletAddress = await contribution.contributionWallet();\n        const foundersWalletAddress = await contribution.foundersWallet();\n        const bountyWalletAddress = await contribution.bountyWallet();\n        const advisorsWalletAddress = await contribution.advisorsWallet();\n        assert.equal(\n            miniMe,\n            cnd.address,\n            \"== token address\"\n        );\n        assert.equal(\n            contributionWalletAddress,\n            contributionWallet,\n            \"== contribution wallet address\"\n        );\n        assert.equal(\n            foundersWalletAddress,\n            foundersWallet,\n            \"== founders wallet address\"\n        );\n        assert.equal(\n            bountyWalletAddress,\n            bountyWallet,\n            \"== bounty wallet address\"\n        );\n        assert.equal(\n            advisorsWalletAddress,\n            advisorsWallet,\n            \"== advisors wallet address\"\n        );",
            "err": {},
            "isRoot": false,
            "uuid": "6ccebc62-6920-4726-91ef-08dbc0268edb",
            "parentUUID": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5734,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "ea598db1-4407-4754-bdae-a02aa7258e6d",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "#constructor accepts MiniMe instance",
      "fullTitle": "Contract: Contribution #constructor accepts MiniMe instance",
      "timedOut": false,
      "duration": 5734,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const tokenFactory = await MiniMeTokenFactory.new();\n        const cnd = await CND.new(tokenFactory.address);\n        const contribution = await Contribution.new(\n            cnd.address,\n            contributionWallet,\n            foundersWallet,\n            advisorsWallet,\n            bountyWallet\n        );\n        // await contribution.changeController(owner);\n        const miniMe = await contribution.cnd();\n        const contributionWalletAddress = await contribution.contributionWallet();\n        const foundersWalletAddress = await contribution.foundersWallet();\n        const bountyWalletAddress = await contribution.bountyWallet();\n        const advisorsWalletAddress = await contribution.advisorsWallet();\n        assert.equal(\n            miniMe,\n            cnd.address,\n            \"== token address\"\n        );\n        assert.equal(\n            contributionWalletAddress,\n            contributionWallet,\n            \"== contribution wallet address\"\n        );\n        assert.equal(\n            foundersWalletAddress,\n            foundersWallet,\n            \"== founders wallet address\"\n        );\n        assert.equal(\n            bountyWalletAddress,\n            bountyWallet,\n            \"== bounty wallet address\"\n        );\n        assert.equal(\n            advisorsWalletAddress,\n            advisorsWallet,\n            \"== advisors wallet address\"\n        );",
      "err": {},
      "isRoot": false,
      "uuid": "6ccebc62-6920-4726-91ef-08dbc0268edb",
      "parentUUID": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can intialize 4 tiers",
      "fullTitle": "#initializeTier can intialize 4 tiers",
      "timedOut": false,
      "duration": 20293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            const tier1_from_contribution_array = await contribution.tiers(0);\n            assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n            const tier2_from_contribution_array = await contribution.tiers(1);\n            assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n            const tier3_from_contribution_array = await contribution.tiers(2);\n            assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n            const tier4_from_contribution_array = await contribution.tiers(3);\n            assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
      "err": {},
      "isRoot": false,
      "uuid": "25f45cd7-9eb6-4bef-bdb8-fa7cc5812800",
      "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to overwrite tier",
      "fullTitle": "#initializeTier throws when you try to overwrite tier",
      "timedOut": false,
      "duration": 7182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            const txReceipt = await contribution.initializeTier(0, \"0x999\");\n            const tier = await contribution.tiers(0);\n            assert.equal(tier, tier1_deployed.address);",
      "err": {},
      "isRoot": false,
      "uuid": "0b958097-451e-4916-ada1-3b5a5e186829",
      "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize 5 tiers",
      "fullTitle": "#initializeTier throws when you try to initialize 5 tiers",
      "timedOut": false,
      "duration": 23386,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            await contribution.initializeTier(4, tier1_deployed.address);\n            const tier = await contribution.tiers(4);\n            assert.equal(tier, \"0x\");",
      "err": {},
      "isRoot": false,
      "uuid": "42b3cad2-1e09-4372-a0c9-f39543d4d993",
      "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when called",
      "fullTitle": "fallback throws when called",
      "timedOut": false,
      "duration": 8237,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.send(tier1_params.minimum);\n                await tier1_deployed.send(tier1_params.minimum);\n                await cnd.send(tier1_params.minimum);\n                const totalInvested = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvested, 0);",
      "err": {},
      "isRoot": false,
      "uuid": "59b9eab5-4c93-4747-8635-bf314313ce55",
      "parentUUID": "65eddc67-abb8-4d64-a4a5-e1eb82ab5ed0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy 1 whiteslited investor",
      "fullTitle": "#proxyBuy allows to buy 1 whiteslited investor",
      "timedOut": false,
      "duration": 3667,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const pre = await web3.eth.getBalance(owner);\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                const post = await web3.eth.getBalance(owner);\n                const postCon = await web3.eth.getBalance(contributionWallet);\n                assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "f75c3ace-985e-403e-b5b4-b2b14a031325",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "fullTitle": "#proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "timedOut": false,
      "duration": 5058,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n                const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), 0);\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, false, 'capTier should not be full');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "4863b6a1-26d3-4cdf-a2b2-fa0f51469453",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if maxCapInvestor is reached",
      "fullTitle": "#proxyBuy throws if maxCapInvestor is reached",
      "timedOut": false,
      "duration": 3104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: 1 });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "6b541cba-489a-4527-b27c-c804a39ccc8f",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if tier cap is reached",
      "fullTitle": "#proxyBuy throws if tier cap is reached",
      "timedOut": false,
      "duration": 9300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "dba5a247-b44c-4795-bf98-1065dc0f2899",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not whitelisted",
      "fullTitle": "#proxyBuy throws if not whitelisted",
      "timedOut": false,
      "duration": 3045,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "7eb180b1-5250-44a4-b7ba-16f71b1af440",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if endTime is passed",
      "fullTitle": "#proxyBuy throws if endTime is passed",
      "timedOut": false,
      "duration": 6181,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "52377389-aec2-42ef-a6f2-a2111f273647",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reach totalCap happy path",
      "fullTitle": "#proxyBuy reach totalCap happy path",
      "timedOut": false,
      "duration": 5180,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n                let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeftOwner.toNumber(), 0);\n                let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n                // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n                assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, true);\n                const totalSold = await contribution.totalTokensSold();\n                assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n                const investedWei = await tier1_deployed.totalInvestedWei();\n                assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "adb6b484-be78-41aa-8b30-726abfcc9b05",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "increases tierCount",
      "fullTitle": "#finalize increases tierCount",
      "timedOut": false,
      "duration": 6139,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 0);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.finalize();\n                tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "f16c2111-3ba9-44ad-8250-b80ee05514c6",
      "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you call finalize on non-existed tier",
      "fullTitle": "#finalize throws when you call finalize on non-existed tier",
      "timedOut": false,
      "duration": 3028,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const tierCountBefore = await contribution.tierCount();\n                await contribution.finalize();\n                const tierCountAfter = await contribution.tierCount();\n                assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "c56a89ff-90b1-4410-b06b-299dafa8bce8",
      "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets paused",
      "fullTitle": "#pauseContribution sets paused",
      "timedOut": false,
      "duration": 4081,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let paused = await contribution.paused();\n                assert.equal(paused, false);\n                await contribution.pauseContribution(true);\n                paused = await contribution.paused();\n                assert.equal(paused, true);",
      "err": {},
      "isRoot": false,
      "uuid": "418bbeb6-e895-4690-8b26-3542fe7df39f",
      "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you proxyBuy with paused state",
      "fullTitle": "#pauseContribution throws when you proxyBuy with paused state",
      "timedOut": false,
      "duration": 15491,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.pauseContribution(true);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "04579007-6112-4a89-a6e8-eeecb96d5d13",
      "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if non-owner calls it",
      "fullTitle": "#pauseContribution throws if non-owner calls it",
      "timedOut": false,
      "duration": 4195,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                const before = await contribution.paused();\n                await contribution.pauseContribution(true, { from: advisorsWallet });\n                const after = await contribution.paused();\n                assert.equal(before, after);",
      "err": {},
      "isRoot": false,
      "uuid": "a8da54fd-8372-4db8-ad2d-4ce0793596a7",
      "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#allocate happy path",
      "timedOut": false,
      "duration": 46989,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const should = require('chai')\n                    .use(require('chai-as-promised'))\n                    .use(require('chai-bignumber')(BigNumber))\n                    .should()\n                await deployThreeTiers();\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.initializeTier(\n                    1, tier2_deployed.address\n                );\n                await contribution.initializeTier(\n                    2, tier3_deployed.address\n                );\n                await contribution.initializeTier(\n                    3, tier4_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier4_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n                const totalTokenSold = await contribution.totalTokensSold();\n                const totalSupply = totalTokenSold.mul(100).div(75);\n                const foundersAmount = totalSupply.div(5);\n                const advisorsAmount = totalSupply.mul(38).div(1000);\n                const bountyAmount = totalSupply.mul(12).div(1000);\n                await contribution.finalize();\n                //will be succesful\n                await contribution.allocate();\n                // will be rejected\n                await contribution.allocate();\n                const balanceFounders = await cnd.balanceOf(foundersWallet);\n                const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n                const balanceBounty = await cnd.balanceOf(bountyWallet);\n                foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n                advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n                bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
      "err": {},
      "isRoot": false,
      "uuid": "6786de15-d51e-4088-ac96-d133d816d451",
      "parentUUID": "32614910-8138-46d5-b48a-ba096b01d356",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets transferrable",
      "fullTitle": "#allowTransfers sets transferrable",
      "timedOut": false,
      "duration": 11334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                let transferable = await contribution.transferable();\n                assert.equal(transferable, false);\n                await contribution.allowTransfers(true);\n                transferable = await contribution.transferable();\n                assert.equal(transferable, true);\n                let balanceOwner = await cnd.balanceOf(owner);\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(balanceOwner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n                await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: owner });\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n                balanceOwner = await cnd.balanceOf(owner);\n                assert.equal(balanceOwner.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "b46113e5-aad6-4fc4-af35-e01f22e44e83",
      "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "always allows to transfer after October 12",
      "fullTitle": "#allowTransfers always allows to transfer after October 12",
      "timedOut": false,
      "duration": 16362,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const balanceBeforeMiner = await cnd.balanceOf(miner);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                let balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n                const October12_2017 = 1507830400;\n                await contribution.setBlockTimestamp(October12_2017 + 1);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner, 0);\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "89f71ea2-db51-4a4d-9ba1-d689b7d44d96",
      "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path - returns true",
      "fullTitle": "#contributionOpen happy path - returns true",
      "timedOut": false,
      "duration": 5202,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, true);",
      "err": {},
      "isRoot": false,
      "uuid": "7c8dcfc1-3cc1-401e-8bec-b3ff44c3744e",
      "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when endTime passed",
      "fullTitle": "#contributionOpen returns false when endTime passed",
      "timedOut": false,
      "duration": 6193,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "5e275866-7110-4aec-8068-abdc43c94081",
      "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when finalized was called",
      "fullTitle": "#contributionOpen returns false when finalized was called",
      "timedOut": false,
      "duration": 12422,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                const finalizedTime = await tier1_deployed.finalizedTime();\n                assert(finalizedTime.toNumber() > 0);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "2078af31-7f0d-451f-8095-f95339c02274",
      "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "#constructor accepts MiniMe instance",
      "fullTitle": "Contract: Contribution #constructor accepts MiniMe instance",
      "timedOut": false,
      "duration": 5734,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n        const tokenFactory = await MiniMeTokenFactory.new();\n        const cnd = await CND.new(tokenFactory.address);\n        const contribution = await Contribution.new(\n            cnd.address,\n            contributionWallet,\n            foundersWallet,\n            advisorsWallet,\n            bountyWallet\n        );\n        // await contribution.changeController(owner);\n        const miniMe = await contribution.cnd();\n        const contributionWalletAddress = await contribution.contributionWallet();\n        const foundersWalletAddress = await contribution.foundersWallet();\n        const bountyWalletAddress = await contribution.bountyWallet();\n        const advisorsWalletAddress = await contribution.advisorsWallet();\n        assert.equal(\n            miniMe,\n            cnd.address,\n            \"== token address\"\n        );\n        assert.equal(\n            contributionWalletAddress,\n            contributionWallet,\n            \"== contribution wallet address\"\n        );\n        assert.equal(\n            foundersWalletAddress,\n            foundersWallet,\n            \"== founders wallet address\"\n        );\n        assert.equal(\n            bountyWalletAddress,\n            bountyWallet,\n            \"== bounty wallet address\"\n        );\n        assert.equal(\n            advisorsWalletAddress,\n            advisorsWallet,\n            \"== advisors wallet address\"\n        );",
      "err": {},
      "isRoot": false,
      "uuid": "6ccebc62-6920-4726-91ef-08dbc0268edb",
      "parentUUID": "7aa950c7-66f6-4632-9b90-7e6d073b384d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can intialize 4 tiers",
      "fullTitle": "#initializeTier can intialize 4 tiers",
      "timedOut": false,
      "duration": 20293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            const tier1_from_contribution_array = await contribution.tiers(0);\n            assert.equal(tier1_from_contribution_array, tier1_deployed.address, \"Contribution can't save tier\");\n            const tier2_from_contribution_array = await contribution.tiers(1);\n            assert.equal(tier2_from_contribution_array, tier2_deployed.address, \"Contribution can't save tier\");\n            const tier3_from_contribution_array = await contribution.tiers(2);\n            assert.equal(tier3_from_contribution_array, tier3_deployed.address, \"Contribution can't save tier\");\n            const tier4_from_contribution_array = await contribution.tiers(3);\n            assert.equal(tier4_from_contribution_array, tier4_deployed.address, \"Contribution can't save tier\");",
      "err": {},
      "isRoot": false,
      "uuid": "25f45cd7-9eb6-4bef-bdb8-fa7cc5812800",
      "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to overwrite tier",
      "fullTitle": "#initializeTier throws when you try to overwrite tier",
      "timedOut": false,
      "duration": 7182,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            const txReceipt = await contribution.initializeTier(0, \"0x999\");\n            const tier = await contribution.tiers(0);\n            assert.equal(tier, tier1_deployed.address);",
      "err": {},
      "isRoot": false,
      "uuid": "0b958097-451e-4916-ada1-3b5a5e186829",
      "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you try to initialize 5 tiers",
      "fullTitle": "#initializeTier throws when you try to initialize 5 tiers",
      "timedOut": false,
      "duration": 23386,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n            await deployThreeTiers();\n            await contribution.initializeTier(\n                0, tier1_deployed.address\n            );\n            await contribution.initializeTier(\n                1, tier2_deployed.address\n            );\n            await contribution.initializeTier(\n                2, tier3_deployed.address\n            );\n            await contribution.initializeTier(\n                3, tier4_deployed.address\n            );\n            await contribution.initializeTier(4, tier1_deployed.address);\n            const tier = await contribution.tiers(4);\n            assert.equal(tier, \"0x\");",
      "err": {},
      "isRoot": false,
      "uuid": "42b3cad2-1e09-4372-a0c9-f39543d4d993",
      "parentUUID": "45cebc74-5d77-4948-a271-27a528cd6c4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when called",
      "fullTitle": "fallback throws when called",
      "timedOut": false,
      "duration": 8237,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.send(tier1_params.minimum);\n                await tier1_deployed.send(tier1_params.minimum);\n                await cnd.send(tier1_params.minimum);\n                const totalInvested = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvested, 0);",
      "err": {},
      "isRoot": false,
      "uuid": "59b9eab5-4c93-4747-8635-bf314313ce55",
      "parentUUID": "65eddc67-abb8-4d64-a4a5-e1eb82ab5ed0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "allows to buy 1 whiteslited investor",
      "fullTitle": "#proxyBuy allows to buy 1 whiteslited investor",
      "timedOut": false,
      "duration": 3667,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const pre = await web3.eth.getBalance(owner);\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                const post = await web3.eth.getBalance(owner);\n                const postCon = await web3.eth.getBalance(contributionWallet);\n                assert(post.toNumber() < pre.toNumber(), 'post is more than pre');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), weiToSend.toNumber(), 'contributionWallet balance is not equal to weiToSend');\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), weiToSend.toNumber(), 'totalWei is not equal to invested amount');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = weiToSend.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                let tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), tier1_params.maxInvestorCap.sub(weiToSend).mul(tier1_params.exchangeRate));\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "f75c3ace-985e-403e-b5b4-b2b14a031325",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "fullTitle": "#proxyBuy buys tokens on the amount available to buy and sends refund if it exceeds maxCapInvestor",
      "timedOut": false,
      "duration": 5058,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const weiToSend = tier1_params.minimum.mul(2);\n                const contWallBalanceBefore = await web3.eth.getBalance(contributionWallet);\n                const txReceipt = await contribution.proxyPayment(owner, { from: owner, value: weiToSend });\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.maxInvestorCap.toNumber());\n                const tokensLeft = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeft.toNumber(), 0);\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, false, 'capTier should not be full');\n                const contWallBalanceAfter = await web3.eth.getBalance(contributionWallet);\n                assert.equal(contWallBalanceAfter.sub(contWallBalanceBefore).toNumber(), tier1_params.maxInvestorCap.toNumber(), 'contributionWallet balance is not equal to maxCap');\n                const totalSold = await contribution.totalTokensSold();\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(totalSold.toNumber(), userShouldReceiveTokens, 'totalSoldTokens is not equal to how much was sold');\n                const balance = await cnd.balanceOf(owner);\n                assert.equal(balance.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');",
      "err": {},
      "isRoot": false,
      "uuid": "4863b6a1-26d3-4cdf-a2b2-fa0f51469453",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if maxCapInvestor is reached",
      "fullTitle": "#proxyBuy throws if maxCapInvestor is reached",
      "timedOut": false,
      "duration": 3104,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: 1 });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "6b541cba-489a-4527-b27c-c804a39ccc8f",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if tier cap is reached",
      "fullTitle": "#proxyBuy throws if tier cap is reached",
      "timedOut": false,
      "duration": 9300,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "dba5a247-b44c-4795-bf98-1065dc0f2899",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if not whitelisted",
      "fullTitle": "#proxyBuy throws if not whitelisted",
      "timedOut": false,
      "duration": 3045,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.minimum });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "7eb180b1-5250-44a4-b7ba-16f71b1af440",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if endTime is passed",
      "fullTitle": "#proxyBuy throws if endTime is passed",
      "timedOut": false,
      "duration": 6181,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "52377389-aec2-42ef-a6f2-a2111f273647",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "reach totalCap happy path",
      "fullTitle": "#proxyBuy reach totalCap happy path",
      "timedOut": false,
      "duration": 5180,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.whitelistAddresses([advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                let totalNow = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalNow.toNumber(), tier1_params.totalCap.toNumber());\n                let tokensLeftOwner = await contribution.investorAmountTokensToBuy(owner);\n                assert.equal(tokensLeftOwner.toNumber(), 0);\n                let tokensLeftAdvisor = await contribution.investorAmountTokensToBuy(advisorsWallet);\n                // tier cap is 2 eth, we should only process 0.5 eth, so 1 eth * exchangeRate = 3 * 10**18 tokens\n                assert.equal(tokensLeftAdvisor.toNumber(), new BigNumber(10 ** 18 * 3));\n                const isCapReached = await contribution.isCurrentTierCapReached();\n                assert.equal(isCapReached, true);\n                const totalSold = await contribution.totalTokensSold();\n                assert.equal(totalSold, tier1_params.totalCap.mul(tier1_params.exchangeRate).toNumber());\n                const investedWei = await tier1_deployed.totalInvestedWei();\n                assert.equal(investedWei.toNumber(), tier1_params.totalCap.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "adb6b484-be78-41aa-8b30-726abfcc9b05",
      "parentUUID": "7e76636e-47af-4657-bfaf-184ee513fdd2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "increases tierCount",
      "fullTitle": "#finalize increases tierCount",
      "timedOut": false,
      "duration": 6139,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 0);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.finalize();\n                tierCount = await contribution.tierCount();\n                assert.equal(tierCount.toNumber(), 1);",
      "err": {},
      "isRoot": false,
      "uuid": "f16c2111-3ba9-44ad-8250-b80ee05514c6",
      "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you call finalize on non-existed tier",
      "fullTitle": "#finalize throws when you call finalize on non-existed tier",
      "timedOut": false,
      "duration": 3028,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const tierCountBefore = await contribution.tierCount();\n                await contribution.finalize();\n                const tierCountAfter = await contribution.tierCount();\n                assert.equal(tierCountBefore.toNumber(), tierCountAfter.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "c56a89ff-90b1-4410-b06b-299dafa8bce8",
      "parentUUID": "a06479b1-7504-409e-b034-9888333efed3",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets paused",
      "fullTitle": "#pauseContribution sets paused",
      "timedOut": false,
      "duration": 4081,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let paused = await contribution.paused();\n                assert.equal(paused, false);\n                await contribution.pauseContribution(true);\n                paused = await contribution.paused();\n                assert.equal(paused, true);",
      "err": {},
      "isRoot": false,
      "uuid": "418bbeb6-e895-4690-8b26-3542fe7df39f",
      "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws when you proxyBuy with paused state",
      "fullTitle": "#pauseContribution throws when you proxyBuy with paused state",
      "timedOut": false,
      "duration": 15491,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.pauseContribution(true);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                const totalInvestedBefore = await tier1_deployed.totalInvestedWei();\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const totalInvestedAfter = await tier1_deployed.totalInvestedWei();\n                assert.equal(totalInvestedAfter.toNumber(), totalInvestedBefore.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "04579007-6112-4a89-a6e8-eeecb96d5d13",
      "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "throws if non-owner calls it",
      "fullTitle": "#pauseContribution throws if non-owner calls it",
      "timedOut": false,
      "duration": 4195,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                const before = await contribution.paused();\n                await contribution.pauseContribution(true, { from: advisorsWallet });\n                const after = await contribution.paused();\n                assert.equal(before, after);",
      "err": {},
      "isRoot": false,
      "uuid": "a8da54fd-8372-4db8-ad2d-4ce0793596a7",
      "parentUUID": "fb37fca3-5fd2-4756-81ce-124b3c7a3352",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path",
      "fullTitle": "#allocate happy path",
      "timedOut": false,
      "duration": 46989,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                const should = require('chai')\n                    .use(require('chai-as-promised'))\n                    .use(require('chai-bignumber')(BigNumber))\n                    .should()\n                await deployThreeTiers();\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.initializeTier(\n                    1, tier2_deployed.address\n                );\n                await contribution.initializeTier(\n                    2, tier3_deployed.address\n                );\n                await contribution.initializeTier(\n                    3, tier4_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier4_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.finalize();\n                await contribution.proxyPayment(owner, { from: owner, value: tier4_params.maxInvestorCap });\n                const totalTokenSold = await contribution.totalTokensSold();\n                const totalSupply = totalTokenSold.mul(100).div(75);\n                const foundersAmount = totalSupply.div(5);\n                const advisorsAmount = totalSupply.mul(38).div(1000);\n                const bountyAmount = totalSupply.mul(12).div(1000);\n                await contribution.finalize();\n                //will be succesful\n                await contribution.allocate();\n                // will be rejected\n                await contribution.allocate();\n                const balanceFounders = await cnd.balanceOf(foundersWallet);\n                const balanceAdvisors = await cnd.balanceOf(advisorsWallet);\n                const balanceBounty = await cnd.balanceOf(bountyWallet);\n                foundersAmount.should.be.bignumber.equal(balanceFounders, 0, BigNumber.ROUND_DOWN, 'balanceFounders failed');\n                advisorsAmount.should.be.bignumber.equal(advisorsAmount, 0, BigNumber.ROUND_DOWN, 'balanceAdvisors failed');\n                bountyAmount.should.be.bignumber.equal(balanceBounty, 0, BigNumber.ROUND_DOWN, 'balanceBounty failed');",
      "err": {},
      "isRoot": false,
      "uuid": "6786de15-d51e-4088-ac96-d133d816d451",
      "parentUUID": "32614910-8138-46d5-b48a-ba096b01d356",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "sets transferrable",
      "fullTitle": "#allowTransfers sets transferrable",
      "timedOut": false,
      "duration": 11334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                let transferable = await contribution.transferable();\n                assert.equal(transferable, false);\n                await contribution.allowTransfers(true);\n                transferable = await contribution.transferable();\n                assert.equal(transferable, true);\n                let balanceOwner = await cnd.balanceOf(owner);\n                const userShouldReceiveTokens = tier1_params.maxInvestorCap.mul(tier1_params.exchangeRate);\n                assert.equal(balanceOwner.toNumber(), userShouldReceiveTokens.toNumber(), 'balanceOf doesnot have right amout of tokens');\n                await cnd.transfer(foundersWallet, userShouldReceiveTokens, { from: owner });\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), userShouldReceiveTokens.toNumber(), 'founderwallet did not receive tokens');\n                balanceOwner = await cnd.balanceOf(owner);\n                assert.equal(balanceOwner.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "b46113e5-aad6-4fc4-af35-e01f22e44e83",
      "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "always allows to transfer after October 12",
      "fullTitle": "#allowTransfers always allows to transfer after October 12",
      "timedOut": false,
      "duration": 16362,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                const balanceBeforeMiner = await cnd.balanceOf(miner);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                let balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner.toNumber(), balanceBeforeMiner.toNumber());\n                const October12_2017 = 1507830400;\n                await contribution.setBlockTimestamp(October12_2017 + 1);\n                await cnd.transfer(foundersWallet, tier1_params.maxInvestorCap);\n                balanceAfterMiner = await cnd.balanceOf(miner);\n                assert.equal(balanceAfterMiner, 0);\n                const balanceFounder = await cnd.balanceOf(foundersWallet);\n                assert.equal(balanceFounder.toNumber(), balanceBeforeMiner.toNumber());",
      "err": {},
      "isRoot": false,
      "uuid": "89f71ea2-db51-4a4d-9ba1-d689b7d44d96",
      "parentUUID": "9ba0aa33-58d0-42e1-bb22-e95fecd3d73c",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "happy path - returns true",
      "fullTitle": "#contributionOpen happy path - returns true",
      "timedOut": false,
      "duration": 5202,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, true);",
      "err": {},
      "isRoot": false,
      "uuid": "7c8dcfc1-3cc1-401e-8bec-b3ff44c3744e",
      "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when endTime passed",
      "fullTitle": "#contributionOpen returns false when endTime passed",
      "timedOut": false,
      "duration": 6193,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                let contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);\n                await contribution.setBlockTimestamp(tier1_params.endTime + 1);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "5e275866-7110-4aec-8068-abdc43c94081",
      "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "returns false when finalized was called",
      "fullTitle": "#contributionOpen returns false when finalized was called",
      "timedOut": false,
      "duration": 12422,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async function () {\n                await contribution.initializeTier(\n                    0, tier1_deployed.address\n                );\n                await contribution.setBlockTimestamp(tier1_params.startTime);\n                await contribution.whitelistAddresses([owner, advisorsWallet], 0, true);\n                await contribution.proxyPayment(owner, { from: owner, value: tier1_params.maxInvestorCap });\n                await contribution.proxyPayment(advisorsWallet, { from: advisorsWallet, value: tier1_params.maxInvestorCap });\n                const finalizedTime = await tier1_deployed.finalizedTime();\n                assert(finalizedTime.toNumber() > 0);\n                contributionOpen = await contribution.contributionOpen();\n                assert.equal(contributionOpen, false);",
      "err": {},
      "isRoot": false,
      "uuid": "2078af31-7f0d-451f-8095-f95339c02274",
      "parentUUID": "ecdbbb6d-0ba1-4f1d-9c34-026c7a09f383",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}